#lang racket

(provide assign-homes)

; function for assign-homes pass of compiler
; assigns all variables to stack locations
; var_locs is a list of numbers corresponding to the location on the stack of a variable
(define (assign-homes var_locs)
  (lambda (e)
    (match e
      [`(program ,vars ,exprs)
       (set! var_locs (append var_locs vars))
       (define framesize (if (equal? (system-type 'os) 'macosx)
                             (* (ceiling (/ (length var_locs) 2)) 16)
                             (* (length var_locs) 8)))
       (let ([asm (map (assign-homes var_locs) exprs)])
         `(program ,framesize (,@asm)))]
      [`(negq ,val)       
       (let-values ([(op expr) ((assign-homes var_locs) val)])
         `(negq (deref rbp ,(- (* 8 (index-of var_locs expr))))))]
      [`(,op ,src ,dest)
       (let-values ([(type_src sym_src) ((assign-homes var_locs) src)]
                    [(type_dest sym_dest) ((assign-homes var_locs) dest)])
         (let ([src (if (eq? 'var type_src) `(deref rbp ,(- (* 8 (index-of var_locs sym_src)))) src)]
               [dest (if (eq? 'var type_dest) `(deref rbp ,(- (* 8 (index-of var_locs sym_dest)))) dest)])
           `(,op ,src ,dest)))]
      [`(callq ,fxn) e]
      [`(,type ,sym)
       (values type sym)]
      [`(retq) e]
      )))
